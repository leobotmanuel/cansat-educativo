{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introducci\u00f3n \u00b6 El proyecto Cansat Educativo es un sistema electr\u00f3nico programable para telemetr\u00eda de datos atmosf\u00e9ricos y geolocalizaci\u00f3n, lanzado por un cohete y rescatado con un paraca\u00eddas. CanSat El sistema electr\u00f3nico programable con el lenguaje visual Arduinoblock es un Arduino Mega 2560 Pro Mini con los siguientes sensores: BMP180, aceler\u00f3metro, receptor IR y GPS. Tambi\u00e9n un datalogger en memoria microSD para la grabaci\u00f3n de datos en local y el m\u00f3dulo de comunicaciones RF APC220 para mandar los datos captados por los sensores a la estaci\u00f3n base. Componentes del sistema electr\u00f3nico Programa. C\u00f3digo de bloques de Sensores La estaci\u00f3n base recibe los datos por radio y con el lenguaje de programaci\u00f3n Processing almacena los datos en un archivo de datos plano y visualiza gr\u00e1ficamente, en tiempo real, la recepci\u00f3n de los datos con la aplicaci\u00f3n KST. Comunicaciones CanSat-Estaci\u00f3n Base. Fuente: recursos de ESERO Presentaci\u00f3n y gr\u00e1ficas de los datos","title":"Introducci\u00f3n"},{"location":"#introduccion","text":"El proyecto Cansat Educativo es un sistema electr\u00f3nico programable para telemetr\u00eda de datos atmosf\u00e9ricos y geolocalizaci\u00f3n, lanzado por un cohete y rescatado con un paraca\u00eddas. CanSat El sistema electr\u00f3nico programable con el lenguaje visual Arduinoblock es un Arduino Mega 2560 Pro Mini con los siguientes sensores: BMP180, aceler\u00f3metro, receptor IR y GPS. Tambi\u00e9n un datalogger en memoria microSD para la grabaci\u00f3n de datos en local y el m\u00f3dulo de comunicaciones RF APC220 para mandar los datos captados por los sensores a la estaci\u00f3n base. Componentes del sistema electr\u00f3nico Programa. C\u00f3digo de bloques de Sensores La estaci\u00f3n base recibe los datos por radio y con el lenguaje de programaci\u00f3n Processing almacena los datos en un archivo de datos plano y visualiza gr\u00e1ficamente, en tiempo real, la recepci\u00f3n de los datos con la aplicaci\u00f3n KST. Comunicaciones CanSat-Estaci\u00f3n Base. Fuente: recursos de ESERO Presentaci\u00f3n y gr\u00e1ficas de los datos","title":"Introducci\u00f3n"},{"location":"about/","text":"Autores \u00b6 Pedro Ru\u00edz Profesor de Tecnolog\u00eda Jos\u00e9 M\u00aa Fern\u00e1ndez Ingeniero Tec. Telecomunicaciones Manuel Hidalgo - LeoBot Divulgador de Rob\u00f3tica Educativa y OpenSource","title":"Autores"},{"location":"about/#autores","text":"Pedro Ru\u00edz Profesor de Tecnolog\u00eda Jos\u00e9 M\u00aa Fern\u00e1ndez Ingeniero Tec. Telecomunicaciones Manuel Hidalgo - LeoBot Divulgador de Rob\u00f3tica Educativa y OpenSource","title":"Autores"},{"location":"imagenes/","text":"Galer\u00eda de im\u00e1genes y videos \u00b6","title":"Imagenes"},{"location":"imagenes/#galeria-de-imagenes-y-videos","text":"","title":"Galer\u00eda de im\u00e1genes y videos"},{"location":"cansat/cansat/","text":"Proyecto Cient\u00edfico. \u00b6 La Agencia Espacial Europea propone el concurso CanSat con unos requisitos a cumplir. Teniendo en cuenta los requisitos marcados se ha establecido los siguientes objetivos: Objetivos. Misi\u00f3n primaria. \u00b6 Graficar e interpretar variaciones de altura y presi\u00f3n: comprobar que a mayor altura menor presi\u00f3n y viceversa. Graficar e interpretar variaciones de altura y temperatura: comprobar que a mayor altura menor temperatura. Objetivos. Misi\u00f3n secundaria. \u00b6 Graficar e interpretar la aceleraci\u00f3n en Z: comprobamos el dise\u00f1o del paracaidas, que ha sido calculado para que el movimiento de descenso se M.R.U (movimiento uniforme a velocidad constante) por tanto la aceleraci\u00f3n en Z debe ser en torno a 0 m/s2.","title":"CanSat. Proyecto Cient\u00edfico"},{"location":"cansat/cansat/#proyecto-cientifico","text":"La Agencia Espacial Europea propone el concurso CanSat con unos requisitos a cumplir. Teniendo en cuenta los requisitos marcados se ha establecido los siguientes objetivos:","title":"Proyecto Cient\u00edfico."},{"location":"cansat/cansat/#objetivos-mision-primaria","text":"Graficar e interpretar variaciones de altura y presi\u00f3n: comprobar que a mayor altura menor presi\u00f3n y viceversa. Graficar e interpretar variaciones de altura y temperatura: comprobar que a mayor altura menor temperatura.","title":"Objetivos. Misi\u00f3n primaria."},{"location":"cansat/cansat/#objetivos-mision-secundaria","text":"Graficar e interpretar la aceleraci\u00f3n en Z: comprobamos el dise\u00f1o del paracaidas, que ha sido calculado para que el movimiento de descenso se M.R.U (movimiento uniforme a velocidad constante) por tanto la aceleraci\u00f3n en Z debe ser en torno a 0 m/s2.","title":"Objetivos. Misi\u00f3n secundaria."},{"location":"comunicaciones/comunicaciones/","text":"Comunicaciones por radio. \u00b6 Las comunicaciones entre el CanSat y la Estaci\u00f3n Base la realizamos con los m\u00f3dulos de radiofrecuencia APC220 en la banda 433,05-434,79 MHz. De acuerdo a la regulaci\u00f3n vigente, la potencia radiada aparente m\u00e1xima permitida es de 10 mW y el ciclo de trabajo no ser\u00e1 superior al 10%. Especificiones el\u00e9ctricas APC220 Para los c\u00e1lculos se utiliza la siguiente ecuaci\u00f3n: PRA = Pt (dBm) \u2013 Lc (dB) + Ga (dBd), Pt= Potencia del transmisor Lc= Perdidas del cable Ga= Ganancia de la antena Ga(dBi)= Ga(dBd)+2,15 Si no tenemos p\u00e9rdidas en el cable y no tenemos ganancia en la antena, PRA = Pt -> Pt = 10dBm 13 dBm= 20mW -> potencia 9 10 dBm = 10mW -> potencia 7 La transmisi\u00f3n se ha ajustado a una velocidad de 2400 baudios y a nivel de potencia 7 para un mayor alcance, para el ajuste de los dispositivos del kit APC220. Valores por defecto APC220 M\u00f3dulos de radiofrecuencia APC220 y adaptador USB - En el CanSat colocamos un m\u00f3dulo de radiofrecuencia APC220 a 434 Mhz situado en el cuerpo del cansat, con una antena con conector SMA. Para el c\u00e1lculo de la longitud de la antena emisora se usa la f\u00f3rmula, de \u00bc longitud de onda \u00bc longitud de onda donde c es la velocidad de la luz y f la frecuencia de transmisi\u00f3n en Hertzios (Hz). Por tanto, la longitud del cable ser\u00e1 de: Longitud del cable de antena Antena CanSat - En la Estaci\u00f3n Base (PC o port\u00e1til) tenemos el m\u00f3dulo APC200 con adaptador serie-usb para conectarlo al PC. La antena que lleva el receptor est\u00e1 adaptada a la banda de 433 MHz, omnidireccional, con una ganancia de 3dBi. Antena Estaci\u00f3n Base Documentaci\u00f3n: \u00b6 Documento: http://esero.es/wp-content/uploads/2019/10/T11_Radio_Communication.pdf Construcci\u00f3n antena emisor apc220: https://www.narom.no/undervisningsressurser/the-cansat-book/the-primary-mission/cansat-mechanics-design/antenna-design/ Configuraci\u00f3n APC220: http://beetlecraft.blogspot.com/2015/10/tutorial-apc220.html Piezas para carcasa de receptor de radiofrecuencia APC220: https://www.thingiverse.com/thing:643721 Antena Estaci\u00f3n Base con caja de protecci\u00f3n","title":"Comunicaciones por radio"},{"location":"comunicaciones/comunicaciones/#comunicaciones-por-radio","text":"Las comunicaciones entre el CanSat y la Estaci\u00f3n Base la realizamos con los m\u00f3dulos de radiofrecuencia APC220 en la banda 433,05-434,79 MHz. De acuerdo a la regulaci\u00f3n vigente, la potencia radiada aparente m\u00e1xima permitida es de 10 mW y el ciclo de trabajo no ser\u00e1 superior al 10%. Especificiones el\u00e9ctricas APC220 Para los c\u00e1lculos se utiliza la siguiente ecuaci\u00f3n: PRA = Pt (dBm) \u2013 Lc (dB) + Ga (dBd), Pt= Potencia del transmisor Lc= Perdidas del cable Ga= Ganancia de la antena Ga(dBi)= Ga(dBd)+2,15 Si no tenemos p\u00e9rdidas en el cable y no tenemos ganancia en la antena, PRA = Pt -> Pt = 10dBm 13 dBm= 20mW -> potencia 9 10 dBm = 10mW -> potencia 7 La transmisi\u00f3n se ha ajustado a una velocidad de 2400 baudios y a nivel de potencia 7 para un mayor alcance, para el ajuste de los dispositivos del kit APC220. Valores por defecto APC220 M\u00f3dulos de radiofrecuencia APC220 y adaptador USB - En el CanSat colocamos un m\u00f3dulo de radiofrecuencia APC220 a 434 Mhz situado en el cuerpo del cansat, con una antena con conector SMA. Para el c\u00e1lculo de la longitud de la antena emisora se usa la f\u00f3rmula, de \u00bc longitud de onda \u00bc longitud de onda donde c es la velocidad de la luz y f la frecuencia de transmisi\u00f3n en Hertzios (Hz). Por tanto, la longitud del cable ser\u00e1 de: Longitud del cable de antena Antena CanSat - En la Estaci\u00f3n Base (PC o port\u00e1til) tenemos el m\u00f3dulo APC200 con adaptador serie-usb para conectarlo al PC. La antena que lleva el receptor est\u00e1 adaptada a la banda de 433 MHz, omnidireccional, con una ganancia de 3dBi. Antena Estaci\u00f3n Base","title":"Comunicaciones por radio."},{"location":"comunicaciones/comunicaciones/#documentacion","text":"Documento: http://esero.es/wp-content/uploads/2019/10/T11_Radio_Communication.pdf Construcci\u00f3n antena emisor apc220: https://www.narom.no/undervisningsressurser/the-cansat-book/the-primary-mission/cansat-mechanics-design/antenna-design/ Configuraci\u00f3n APC220: http://beetlecraft.blogspot.com/2015/10/tutorial-apc220.html Piezas para carcasa de receptor de radiofrecuencia APC220: https://www.thingiverse.com/thing:643721 Antena Estaci\u00f3n Base con caja de protecci\u00f3n","title":"Documentaci\u00f3n:"},{"location":"estructura/estructura/","text":"La estructura del CanSat se ha basado en Canduino donde hemos hecho unas modificaciones para adaptarlo a nuestra soluci\u00f3n. Peque\u00f1a modificaci\u00f3n a la tapa superior de canduino para pasar cable antena GPS. Tapa superior * Peque\u00f1a modificaci\u00f3n de la tapa inferior para dejar ventana para el receptor de infrarrojo. Tapa inferior * Peque\u00f1a modificaci\u00f3n de la base principal (board 1) para dejar hueco para soldar pines Vin y gnd de alimentaci\u00f3n. Base principal As\u00ed queda nuestro SotoSat.","title":"Estructura"},{"location":"galeria/clubConcurso2020/","text":"CanSat-Granada julio 2020 \u00b6 La final de CanSat-2020 se celebr\u00f3 en Granada y el Club Rob\u00f3tica Granada fue invitado a participar. Nuestra participaci\u00f3n, con el trabajo de colaboraci\u00f3n con el Equipo SotoSat , desarrollamos en muy poco tiempo RobocilioSAT consiguiendo buenos resultados y una experiencia \u00fanica. RobocilioSAT est\u00e1 construido con m\u00f3dulos del kit de desarrollo M5Stack basado en ESP32 y comunicaciones radio LORA. Equipo RobocilioSAT Video lanzamiento RobocilioSAT Seguimiento y procesamiento de datos. Labor realizada por Maribel Ruiz Video resumen Final Nacional CanSat 2020","title":"CanSat-Granada julio 2020"},{"location":"galeria/clubConcurso2020/#cansat-granada-julio-2020","text":"La final de CanSat-2020 se celebr\u00f3 en Granada y el Club Rob\u00f3tica Granada fue invitado a participar. Nuestra participaci\u00f3n, con el trabajo de colaboraci\u00f3n con el Equipo SotoSat , desarrollamos en muy poco tiempo RobocilioSAT consiguiendo buenos resultados y una experiencia \u00fanica. RobocilioSAT est\u00e1 construido con m\u00f3dulos del kit de desarrollo M5Stack basado en ESP32 y comunicaciones radio LORA. Equipo RobocilioSAT Video lanzamiento RobocilioSAT Seguimiento y procesamiento de datos. Labor realizada por Maribel Ruiz Video resumen Final Nacional CanSat 2020","title":"CanSat-Granada julio 2020"},{"location":"galeria/imagenesEquipo/","text":"Equipo SotoSat \u00b6 El equipo SotoSat del IES Pedro Soto de Rojas de Granada con la colaboraci\u00f3n de Lorenzo Olmo, Manuel Hidalgo @leobotmanuel , y Pepe Alcaide; ha hecho posible el proyecto CanSat Educativo . Dise\u00f1o y construcci\u00f3n del paraca\u00eddas Probando el paraca\u00eddas 1\u00ba Video paracaidas 2\u00ba Video paracaidas Dise\u00f1o e impresi\u00f3n 3D de la estructura Electr\u00f3nica con Arduino y Arduino Mega Ensamblado de la electr\u00f3nica en la estructura Montaje completo y prueba con paraca\u00eddas Video conjunto Telemetr\u00eda","title":"Equipo SotoSat"},{"location":"galeria/imagenesEquipo/#equipo-sotosat","text":"El equipo SotoSat del IES Pedro Soto de Rojas de Granada con la colaboraci\u00f3n de Lorenzo Olmo, Manuel Hidalgo @leobotmanuel , y Pepe Alcaide; ha hecho posible el proyecto CanSat Educativo . Dise\u00f1o y construcci\u00f3n del paraca\u00eddas Probando el paraca\u00eddas 1\u00ba Video paracaidas 2\u00ba Video paracaidas Dise\u00f1o e impresi\u00f3n 3D de la estructura Electr\u00f3nica con Arduino y Arduino Mega Ensamblado de la electr\u00f3nica en la estructura Montaje completo y prueba con paraca\u00eddas Video conjunto Telemetr\u00eda","title":"Equipo SotoSat"},{"location":"misionPrimaria/misionPrimaria/","text":"En la misi\u00f3n Primaria en el desarrollo del CanSat tenemos que cubrir los requisitos que establece las bases del concurso para el lanzamiento. La temperatura y la presi\u00f3n del aire deben almacenarse al menos cada segundo en una tarjeta de memoria extra\u00edble incorporada. El CanSat debe incluir un sistema de recuperaci\u00f3n audible fuerte (por ejemplo, zumbador, sin sistema GPS) ya que los datos s\u00f3lo se almacenar\u00e1n a bordo. El CanSat debe incluir un indicador visual (por ejemplo, LED) para mostrar que est\u00e1 encendido.","title":"Misi\u00f3n Primaria"},{"location":"misionPrimaria/electronicaProgramacion/conexiones/","text":"Arduino Mega2560 Pro Mini. \u00b6 El CanSat Educativo a tener como componente de control la placa Arduino Mega Pro Mini y el resto de componentes los conectamos a \u00e9l. Pinout de los componentes \u00b6 Arduino Mega2560 Pro Mini Sensor BMP180 Receptor IR GPS Memoria microSD Aceler\u00f3metro ADXL345 Radiofrecuencia APC220 Esquema de conexiones \u00b6 Esquema de conexiones","title":"Arduino Mega"},{"location":"misionPrimaria/electronicaProgramacion/conexiones/#arduino-mega2560-pro-mini","text":"El CanSat Educativo a tener como componente de control la placa Arduino Mega Pro Mini y el resto de componentes los conectamos a \u00e9l.","title":"Arduino Mega2560 Pro Mini."},{"location":"misionPrimaria/electronicaProgramacion/conexiones/#pinout-de-los-componentes","text":"Arduino Mega2560 Pro Mini Sensor BMP180 Receptor IR GPS Memoria microSD Aceler\u00f3metro ADXL345 Radiofrecuencia APC220","title":"Pinout de los componentes"},{"location":"misionPrimaria/electronicaProgramacion/conexiones/#esquema-de-conexiones","text":"Esquema de conexiones","title":"Esquema de conexiones"},{"location":"misionPrimaria/electronicaProgramacion/programa/","text":"Programa ArduinoBlocks \u00b6 Proyecto compartido para arduino mega (V1): http://www.arduinoblocks.com/web/project/223835 . Dicho programa inicializa el la funci\u00f3n setup (inicializar) par\u00e1metros como variables, la velocidad de transmisi\u00f3n, el gps, la inicializaci\u00f3n de la SD y enciende el led asociado al pin 13. Bloque del programa inicializaci\u00f3n (Setup) En el bucle principal leemos el valor del sensor de infrarrojo, si es un determinado valor cambia el valor de la variable booleana graba. Si graba es cierto apaga el led del pin 13 y deja el sistema preparado para cada segundo leer los sensores, grabarlos en la microsd y enviarlos por puerto serie por la radiofrecuencia. Si graba es falso enciende el led del pin13. Bloque del programa bucle (Loop) El bloque de programa de la funci\u00f3n inicializa_sd comprueba que existe la tarjeta y el archivo para grabar los datos, eliminando en el caso que exista uno con el nombre de datos.csv . Bloque de la funci\u00f3n inicializa_sd El bloque de programa de la funci\u00f3n leer_sensores asigna a la variable contado tiempo el n\u00famero de la lectura realizada y a las dem\u00e1s variables los valores de los sensores. Bloque de la funci\u00f3n leer_sensores El bloque de programa de la funci\u00f3n graba_sd escribe en el archivo datos.csv los valores asgnados a las variables de los sensores. Bloque de la funci\u00f3n graba_sd El bloque de programa de la funci\u00f3n enviar_serie transmite por el m\u00f3dulo de radiofrecuencia APC220 una trama de datos que sean recibidos por la Estaci\u00f3n Base. Bloque de la funci\u00f3n enviar_serie","title":"Programa"},{"location":"misionPrimaria/electronicaProgramacion/programa/#programa-arduinoblocks","text":"Proyecto compartido para arduino mega (V1): http://www.arduinoblocks.com/web/project/223835 . Dicho programa inicializa el la funci\u00f3n setup (inicializar) par\u00e1metros como variables, la velocidad de transmisi\u00f3n, el gps, la inicializaci\u00f3n de la SD y enciende el led asociado al pin 13. Bloque del programa inicializaci\u00f3n (Setup) En el bucle principal leemos el valor del sensor de infrarrojo, si es un determinado valor cambia el valor de la variable booleana graba. Si graba es cierto apaga el led del pin 13 y deja el sistema preparado para cada segundo leer los sensores, grabarlos en la microsd y enviarlos por puerto serie por la radiofrecuencia. Si graba es falso enciende el led del pin13. Bloque del programa bucle (Loop) El bloque de programa de la funci\u00f3n inicializa_sd comprueba que existe la tarjeta y el archivo para grabar los datos, eliminando en el caso que exista uno con el nombre de datos.csv . Bloque de la funci\u00f3n inicializa_sd El bloque de programa de la funci\u00f3n leer_sensores asigna a la variable contado tiempo el n\u00famero de la lectura realizada y a las dem\u00e1s variables los valores de los sensores. Bloque de la funci\u00f3n leer_sensores El bloque de programa de la funci\u00f3n graba_sd escribe en el archivo datos.csv los valores asgnados a las variables de los sensores. Bloque de la funci\u00f3n graba_sd El bloque de programa de la funci\u00f3n enviar_serie transmite por el m\u00f3dulo de radiofrecuencia APC220 una trama de datos que sean recibidos por la Estaci\u00f3n Base. Bloque de la funci\u00f3n enviar_serie","title":"Programa ArduinoBlocks"},{"location":"misionPrimaria/estacionBase/estacionBase/","text":"Programa de Estaci\u00f3n Base (PC) en Processing. \u00b6 El programa de la Estaci\u00f3n Base se ejecuta en el PC, establece comunicaci\u00f3n con el puerto serie (APC200 receptor pinchado en USB), filtra los posibles datos err\u00f3neos que provengan de cansat usando tres comprobaciones: verifica que la cantidad de campos que hay en cada registro sean 10, verifica que el primer y el \u00faltimo campo tengan un valor determinado, en nuestro caso primer campo \u201csoto\u201d y el \u00faltimo campo \u201cfin\u201d. M\u00e1s tarde con los datos ya filtrados los guarda en un fichero y los muestra en consola y ventana. Estaci\u00f3n Base A continuaci\u00f3n el c\u00f3digo processing de la Estaci\u00f3n Base , esperamos que los comentarios sean suficientemente aclaratorios. import processing . serial . * ; Serial puerto ; //establece variable puerto tipo Serial PrintWriter fichero ; //establece variable fichero tipo PrintWriter (fichero) int contador = 0 ; //variable para contar el n\u00ba de grabaciones realizadas void setup () { //Descomentar la siguiente linea para ver el puerto asignado //println(Serial.list()); size ( 400 , 335 ); background ( 0 ); //establece la variable puerto asignando el receptor APC200 y // una velocidad de 9600 baudios (se modifica para optimizar) puerto = new Serial ( this , Serial . list ()[ 32 ], 9600 ); fichero = createWriter ( \"datos.csv\" ); //crea el fichero datos.csv datosPantalla ( \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" ); } void draw () { datosPantalla ( \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" ); //mientras haya datos en el puerto serie while ( puerto . available () > 0 ) { //leemos los datos del puerto serie hasta el salto de l\u00ednea (10 en ascii), //y los asignamos a buffer String buffer = puerto . readStringUntil ( 10 ); //si buffer no est\u00e1 vac\u00edo if ( buffer != null ) { String [] listaBuffer = split ( buffer , ',' ); //extrae en un array los elementos separados por coma del buffer int longitudBuffer = buffer . length (); //leemos el n\u00ba de caracteres del buffer int numeroCampos = listaBuffer . length ; //leemos el n\u00ba de campos que est\u00e1n en el array, deben ser 10 //println (buffer); //imprimimos en consola el n\u00ba de campos y n\u00ba de caracteres recibidos println ( \"el n\u00ba de campos es:\" + numeroCampos + \" el n\u00ba de caracteres es:\" + longitudBuffer ); //grabamos si hay 10 campos y los campos de control de inicio y fin son correctos if ( numeroCampos == 10 && listaBuffer [ 0 ]. equals ( \"soto\" ) == true && listaBuffer [ 9 ]. equals ( \"fin \\r\\n \" ) == true ) { contador ++ ; fichero . print ( buffer ); //colocamos en el fichero el buffer fichero . flush (); //hacemos la grabaci\u00f3n efectiva y se cierra el fichero println ( buffer ); //imprimimos por consola lo grabado //llamamos a la funci\u00f3n que nos pone en pantalla los datos recogidos datosPantalla ( listaBuffer [ 1 ], listaBuffer [ 2 ], listaBuffer [ 3 ], listaBuffer [ 4 ], listaBuffer [ 5 ], listaBuffer [ 6 ], listaBuffer [ 7 ], listaBuffer [ 8 ]); } else { datosPantalla ( \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" ); } } } } void datosPantalla ( String tiempo , String longitud , String latitud , String altitud , String velocidad , String temperatura , String presion , String acelz ) { background ( 0 ); textSize ( 24 ); text ( \"Datos SotoSat\" , 120 , 35 ); textSize ( 16 ); text ( \"Tiempo(s):\" + tiempo , 50 , 75 ); text ( \"Longitud:\" + longitud , 50 , 100 ); text ( \"Latitud:\" + latitud , 50 , 125 ); text ( \"Altitud (m):\" + altitud , 50 , 150 ); //text (\"Rumbo:\"+rumbo, 50, 175); text ( \"Velocidad (Km/h):\" + velocidad , 50 , 175 ); text ( \"Temperatura (\u00baC):\" + temperatura , 50 , 200 ); text ( \"Presi\u00f3n (mb):\" + presion , 50 , 225 ); text ( \"Acel. z (m/s2):\" + acelz , 50 , 250 ); //text (\"D\u00eda:\"+dia, 50, 100); //text (\"Hora:\"+hora, 50, 125); } El resultado es el siguiente: Presentaci\u00f3n de los datos. Estaci\u00f3n Base","title":"Estaci\u00f3n base"},{"location":"misionPrimaria/estacionBase/estacionBase/#programa-de-estacion-base-pc-en-processing","text":"El programa de la Estaci\u00f3n Base se ejecuta en el PC, establece comunicaci\u00f3n con el puerto serie (APC200 receptor pinchado en USB), filtra los posibles datos err\u00f3neos que provengan de cansat usando tres comprobaciones: verifica que la cantidad de campos que hay en cada registro sean 10, verifica que el primer y el \u00faltimo campo tengan un valor determinado, en nuestro caso primer campo \u201csoto\u201d y el \u00faltimo campo \u201cfin\u201d. M\u00e1s tarde con los datos ya filtrados los guarda en un fichero y los muestra en consola y ventana. Estaci\u00f3n Base A continuaci\u00f3n el c\u00f3digo processing de la Estaci\u00f3n Base , esperamos que los comentarios sean suficientemente aclaratorios. import processing . serial . * ; Serial puerto ; //establece variable puerto tipo Serial PrintWriter fichero ; //establece variable fichero tipo PrintWriter (fichero) int contador = 0 ; //variable para contar el n\u00ba de grabaciones realizadas void setup () { //Descomentar la siguiente linea para ver el puerto asignado //println(Serial.list()); size ( 400 , 335 ); background ( 0 ); //establece la variable puerto asignando el receptor APC200 y // una velocidad de 9600 baudios (se modifica para optimizar) puerto = new Serial ( this , Serial . list ()[ 32 ], 9600 ); fichero = createWriter ( \"datos.csv\" ); //crea el fichero datos.csv datosPantalla ( \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" ); } void draw () { datosPantalla ( \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" ); //mientras haya datos en el puerto serie while ( puerto . available () > 0 ) { //leemos los datos del puerto serie hasta el salto de l\u00ednea (10 en ascii), //y los asignamos a buffer String buffer = puerto . readStringUntil ( 10 ); //si buffer no est\u00e1 vac\u00edo if ( buffer != null ) { String [] listaBuffer = split ( buffer , ',' ); //extrae en un array los elementos separados por coma del buffer int longitudBuffer = buffer . length (); //leemos el n\u00ba de caracteres del buffer int numeroCampos = listaBuffer . length ; //leemos el n\u00ba de campos que est\u00e1n en el array, deben ser 10 //println (buffer); //imprimimos en consola el n\u00ba de campos y n\u00ba de caracteres recibidos println ( \"el n\u00ba de campos es:\" + numeroCampos + \" el n\u00ba de caracteres es:\" + longitudBuffer ); //grabamos si hay 10 campos y los campos de control de inicio y fin son correctos if ( numeroCampos == 10 && listaBuffer [ 0 ]. equals ( \"soto\" ) == true && listaBuffer [ 9 ]. equals ( \"fin \\r\\n \" ) == true ) { contador ++ ; fichero . print ( buffer ); //colocamos en el fichero el buffer fichero . flush (); //hacemos la grabaci\u00f3n efectiva y se cierra el fichero println ( buffer ); //imprimimos por consola lo grabado //llamamos a la funci\u00f3n que nos pone en pantalla los datos recogidos datosPantalla ( listaBuffer [ 1 ], listaBuffer [ 2 ], listaBuffer [ 3 ], listaBuffer [ 4 ], listaBuffer [ 5 ], listaBuffer [ 6 ], listaBuffer [ 7 ], listaBuffer [ 8 ]); } else { datosPantalla ( \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" , \"Sin datos\" ); } } } } void datosPantalla ( String tiempo , String longitud , String latitud , String altitud , String velocidad , String temperatura , String presion , String acelz ) { background ( 0 ); textSize ( 24 ); text ( \"Datos SotoSat\" , 120 , 35 ); textSize ( 16 ); text ( \"Tiempo(s):\" + tiempo , 50 , 75 ); text ( \"Longitud:\" + longitud , 50 , 100 ); text ( \"Latitud:\" + latitud , 50 , 125 ); text ( \"Altitud (m):\" + altitud , 50 , 150 ); //text (\"Rumbo:\"+rumbo, 50, 175); text ( \"Velocidad (Km/h):\" + velocidad , 50 , 175 ); text ( \"Temperatura (\u00baC):\" + temperatura , 50 , 200 ); text ( \"Presi\u00f3n (mb):\" + presion , 50 , 225 ); text ( \"Acel. z (m/s2):\" + acelz , 50 , 250 ); //text (\"D\u00eda:\"+dia, 50, 100); //text (\"Hora:\"+hora, 50, 125); } El resultado es el siguiente: Presentaci\u00f3n de los datos. Estaci\u00f3n Base","title":"Programa de Estaci\u00f3n Base (PC) en Processing."},{"location":"misionSecundaria/telemetria/","text":"Telemetr\u00eda avanzada, tratatamiento y graficado de datos \u00b6 La misi\u00f3n secundaria que se aborda con este proyecto pretende ser de bajo coste y exportable al mayor n\u00famero de situaciones, para ello se han escogido tres v\u00edas de actuaci\u00f3n: Realizar telemetr\u00eda avanzada usando sensores de bajo costo: posicionamiento gps, aceleraci\u00f3n, velocidad, etc. Filtrado de datos en la estaci\u00f3n base: se trata de un programa de processing en el PC de la estaci\u00f3n base que recibe los datos en crudo de la emisi\u00f3n de cansat y los filtra detectando registros (tramas) incorrectas, para ello realiza tres comprobaciones que se deben cunplir a la vez, que el n\u00famero de campos recibidos sea el correcto, que el campo de control de inicio se cumpla y que el campo de control final se cumpla. Con este filtrado conseguimos que los datos que no son correctos por fallos de transmisi\u00f3n (perdida de comunicaci\u00f3n por falta de alcance en la emisi\u00f3n-recepci\u00f3n, interferencias) no lleguen al graficador en tiempo real que provocar\u00edan un mal graficado. Realizar el graficado con KST de los datos previamente filtrados presentando una gr\u00e1fica por cada dato de telemetr\u00eda recibida, siendo el eje X de todas las gr\u00e1ficas el tiempo de ejecuci\u00f3n del lanzamiento. Presentaci\u00f3n y gr\u00e1ficas de los datos Enlaces de inter\u00e9s: \u00b6 Arduino y processing: https://youtu.be/gETASNUTwps Processing y puerto serie: https://polaridad.es/processing-serie-comunicaciones-uart/","title":"Telemetr\u00eda avanzada, tratamiento y graficado de datos"},{"location":"misionSecundaria/telemetria/#telemetria-avanzada-tratatamiento-y-graficado-de-datos","text":"La misi\u00f3n secundaria que se aborda con este proyecto pretende ser de bajo coste y exportable al mayor n\u00famero de situaciones, para ello se han escogido tres v\u00edas de actuaci\u00f3n: Realizar telemetr\u00eda avanzada usando sensores de bajo costo: posicionamiento gps, aceleraci\u00f3n, velocidad, etc. Filtrado de datos en la estaci\u00f3n base: se trata de un programa de processing en el PC de la estaci\u00f3n base que recibe los datos en crudo de la emisi\u00f3n de cansat y los filtra detectando registros (tramas) incorrectas, para ello realiza tres comprobaciones que se deben cunplir a la vez, que el n\u00famero de campos recibidos sea el correcto, que el campo de control de inicio se cumpla y que el campo de control final se cumpla. Con este filtrado conseguimos que los datos que no son correctos por fallos de transmisi\u00f3n (perdida de comunicaci\u00f3n por falta de alcance en la emisi\u00f3n-recepci\u00f3n, interferencias) no lleguen al graficador en tiempo real que provocar\u00edan un mal graficado. Realizar el graficado con KST de los datos previamente filtrados presentando una gr\u00e1fica por cada dato de telemetr\u00eda recibida, siendo el eje X de todas las gr\u00e1ficas el tiempo de ejecuci\u00f3n del lanzamiento. Presentaci\u00f3n y gr\u00e1ficas de los datos","title":"Telemetr\u00eda avanzada, tratatamiento y graficado de datos"},{"location":"misionSecundaria/telemetria/#enlaces-de-interes","text":"Arduino y processing: https://youtu.be/gETASNUTwps Processing y puerto serie: https://polaridad.es/processing-serie-comunicaciones-uart/","title":"Enlaces de inter\u00e9s:"},{"location":"paracaidas/diseno/","text":"En el dise\u00f1o del paraca\u00eddas hemiesf\u00e9rico vamos a tener en cuenta los requisitos que marca las bases del concurso Cansat: La masa del CanSat tiene que estar entre 300 y 500 g. El tiempo de vuelo m\u00e1ximo 120 s. (recomendado). La velocidad de descenso entre 6 y 12 m/s (la velocidad recomendada entre 8 y 11 m/s). En el paraca\u00eddas se tiene el siguiente sistema de fuerzas: Sistema de fuerzas Relacionamos las fuerzas que se producen en el paraca\u00eddas con la superficie del paraca\u00eddas, que interviene como fuerza de resistencia Fr. Para los c\u00e1lculos se igualamos la fuerza de resistencia del paraca\u00eddas (Fr) a el peso que mueve el paraca\u00eddas (Fg = m\u00b7g) hacia el suelo. Cuando est\u00e9n igualadas deja de acelerar y la velocidad se convierte en constante, esa es la velocidad de ca\u00edda. Fg=m\u00b7g (peso CanSat) Fr=\u00bd\u00b7r\u00b7Cd\u00b7A\u00b7V 2 (fuerza de resistencia del paraca\u00eddas). r = densidad del aire (1,22 Kg/m 3 ). Cd = coeficiente de resistencia aerodin\u00e1mico en paraca\u00eddas de forma hemiesf\u00e9rico su valor es 0,62. A = superficie del paraca\u00eddas (en nuestro caso semiesfera). V = velocidad de descenso. 1.- Igualando las dos expresiones m\u00b7g=\u00bd\u00b7r\u00b7Cd\u00b7A\u00b7V 2 de estas dos expresiones puedo despejar el \u00e1rea del paraca\u00eddas, A=2\u00b7(m\u00b7g)/r\u00b7Cd\u00b7V 2 2.- Si la superficie del paraca\u00eddas es una semiesfera A=2\u00b7pi\u00b7R 2 por tanto igualando: 2\u00b7pi\u00b7R 2 =2\u00b7(m\u00b7g)/r\u00b7Cd\u00b7V 2 3.- Despejando R (radio) podemos calcular el di\u00e1metro de la superficie del paraca\u00eddas Para determinar la velocidad de ca\u00edda y si la velocidad es constante (sin aceleraci\u00f3n), tenemos que V=e/t, el cohete alcanza 1000 m de altura (espacio a recorrer) y el tiempo dijimos 120 s, por tanto \u2026., ya tenemos la V, adem\u00e1s tenemos la masa de nuestro cansat (de 300g a 350g), con lo cual ya tenemos todo para calcular nuestro radio o di\u00e1metro de paraca\u00eddas.","title":"Dise\u00f1o y c\u00e1lculo"},{"location":"paracaidas/enlacesParacaidas/","text":"Enlaces complementarios \u00b6 Documento sobre paracaidas: http://esero.es/wp-content/uploads/2019/10/T10_Parachute_Design.pdf Calculo de paracaidas: http://www.rocketmime.com/rockets/descent.html Construcci\u00f3n de paracaidas hemiesf\u00e9rico: https://www.rocketreviews.com/making-a-hemispheric-nylon-parachute-9342.html Sitio de compra y c\u00e1lculo (Fruity Chutes sita en Monte Sereno, CA, US): https://fruitychutes.com/ Dise\u00f1o y construcci\u00f3n de paracaidas: http://www.nakka-rocketry.net/paracon.html Hoja de c\u00e1lculo para dise\u00f1o: http://www.nakka-rocketry.net/soft/parapat_v1.1.xls Compra de tela: aqu\u00ed (ancho 1,5 m, precio por metro lineal de ese ancho)","title":"Enlaces complementarios"},{"location":"paracaidas/enlacesParacaidas/#enlaces-complementarios","text":"Documento sobre paracaidas: http://esero.es/wp-content/uploads/2019/10/T10_Parachute_Design.pdf Calculo de paracaidas: http://www.rocketmime.com/rockets/descent.html Construcci\u00f3n de paracaidas hemiesf\u00e9rico: https://www.rocketreviews.com/making-a-hemispheric-nylon-parachute-9342.html Sitio de compra y c\u00e1lculo (Fruity Chutes sita en Monte Sereno, CA, US): https://fruitychutes.com/ Dise\u00f1o y construcci\u00f3n de paracaidas: http://www.nakka-rocketry.net/paracon.html Hoja de c\u00e1lculo para dise\u00f1o: http://www.nakka-rocketry.net/soft/parapat_v1.1.xls Compra de tela: aqu\u00ed (ancho 1,5 m, precio por metro lineal de ese ancho)","title":"Enlaces complementarios"},{"location":"paracaidas/gores/","text":"Los c\u00e1lculos de la forma y dimensiones de las secciones (gores) del paraca\u00eddas, en funci\u00f3n del radio y el n\u00famero de secciones, hemos desarrollado una hoja de c\u00e1lculo . C\u00e1lculo de las dimensiones de las secciones La representaci\u00f3n gr\u00e1fica de los c\u00e1lculos: representaci\u00f3n gr\u00e1fica de la forma de las secciones Dibujo de secciones del paraca\u00eddas para cortar Corte de las secciones (gores) del paraca\u00eddas Video prueba paracaidas","title":"Secciones (gores)"},{"location":"paracaidas/paracaidas/","text":"Paraca\u00eddas \u00b6 El paraca\u00edda es una parte importante en la misi\u00f3n CanSat. Un buen dise\u00f1o permite que se pueda lanzar y aterrizar de forma segura el CanSat cumpliento sus objetivos cient\u00edficos. Fuente: recursos de ESERO","title":"Paraca\u00eddas"},{"location":"paracaidas/paracaidas/#paracaidas","text":"El paraca\u00edda es una parte importante en la misi\u00f3n CanSat. Un buen dise\u00f1o permite que se pueda lanzar y aterrizar de forma segura el CanSat cumpliento sus objetivos cient\u00edficos. Fuente: recursos de ESERO","title":"Paraca\u00eddas"},{"location":"software/software/","text":"Software \u00b6 Las aplicaciones inform\u00e1ticas y entornos de programaci\u00f3n que hemos utilizado son los siguientes: Arduinoblocks : entorno gr\u00e1fico de programaci\u00f3n online de diferentes plataformas arduino. Processing : lenguaje de programaci\u00f3n en el que se basa Arduino, con el nos comunicaremos por puerto serie para recibir datos en el ordenador y filtrar los correctos. KST (graficado en tiempo real): programa para realizar graficado en tiempo real.","title":"Software"},{"location":"software/software/#software","text":"Las aplicaciones inform\u00e1ticas y entornos de programaci\u00f3n que hemos utilizado son los siguientes: Arduinoblocks : entorno gr\u00e1fico de programaci\u00f3n online de diferentes plataformas arduino. Processing : lenguaje de programaci\u00f3n en el que se basa Arduino, con el nos comunicaremos por puerto serie para recibir datos en el ordenador y filtrar los correctos. KST (graficado en tiempo real): programa para realizar graficado en tiempo real.","title":"Software"}]}